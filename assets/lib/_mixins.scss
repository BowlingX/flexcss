/**
* Utility mixins
*/

// interface
@mixin interface {
  user-select: none;
}

// Creates an arrow at the bottom
@mixin arrow-bottom($color: black, $left: 50%) {

  &:after {
    top: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }

  &:after {
    border-color: transparent;
    border-top-color: $color;
    border-width: 5px;
    left: $left;
    margin-left: -5px;
  }

}
// helper to fix flickering/blurry in different browsers
@mixin perspectiveHelper() {
  backface-visibility: hidden;
  perspective: 1000;
  transform-style:preserve-3d;
}

// a central loader
@mixin centralLoader() {
  left:calc(50% - #{$loaderSize + 5px});
  top:calc(50% - #{$loaderSize + 5px});
  background:#fff;
  padding:10px;
  border-radius:$globalRadius;
  box-shadow:$globalBoxShadow;
}

// creates an arrow at top
@mixin arrow-top($color: #fff, $left: 50%) {

  &:after, &:before {
    bottom: 100%;
    left: $left;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }

  &:after {
    border-color: rgba($color, 0);
    border-bottom-color: $color;
    border-width: 5px;
    margin-left: -5px;
  }
}

// creates a link in a specific color
@mixin link-color($color: $grayColor) {
  color: $color;
  font-weight: normal;
  cursor: pointer;
  &:hover {
    color: lighten($color, 10%);
  }

  &:active {
    color: darken($color, 10%);
  }
}

// keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// animations
@mixin animate($name, $duration: .5s, $iterationCount: 1, $direction: normal) {
  animation-name: $name;
  animation-duration: $duration;
  animation-fill-mode: both;
  animation-iteration-count: $iterationCount;
  animation-direction: $direction;
}

// Creates an overflow container
@mixin overflowContainer($color, $height: 100%, $width: 60px) {

  position: relative;
  transform: translateZ(0px);

  &:after {
    content: ' ';
    background: linear-gradient(to right, rgba($color, 0) 0%, $color 100%);;
    width: $width;
    height: $height;
    position: absolute;
    right: 0;
    top: 0;
    pointer-events: none;
  }
}

// creates a loading animation
// Shamelessly stolen from bootstrap
@mixin loadingContainer($color: #fff) {
  animation: progress-bar-stripes 2s linear infinite;
  cursor: wait;
  background-image: linear-gradient(45deg, rgba($color, .15) 25%, transparent 25%,
          transparent 50%, rgba($color, .15) 50%, rgba($color, .15) 75%,
          transparent 75%, transparent);
  background-size: 40px 40px;
}

// small helper for ellipsis
@mixin ellipsis($max-width:300px){
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  max-width:$max-width;
}

/**
* Creates an icon, by default uses fontello
* Nested spans are no icons anymore
*/
@mixin icon($font: fontello) {
  font-family: $font;
  font-weight: normal !important;
  font-style: normal;
  text-decoration: inherit;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  &:before {
    text-decoration: inherit;
    display: inline-block;
    speak: none;
  }
  span {
    font-family: $baseFontFamily;
  }
}

/**
* A Mixin that creates a bottom border for a specific element and animates it on hover
* On active state this border is always active
* Don't forget to set position:relative to element
*/
@mixin borderWobble($color: $primaryColor, $height: $tabBottomLineHeight, $padding: $overallPadding) {

  &:hover, &.active {
    &:after {
      left: 0;
      width: calc(100% - (#{$padding*2}));
      opacity: 1;
    }
  }

  &:after {
    will-change: width, left, opacity;
    content: '';
    position: absolute;
    width: 0;
    background: $color;
    opacity: 0;
    height: $height;
    bottom: 0;
    left: calc(50% - (#{$padding}));
    margin: 0 $padding;
    transition: width .2s ease, left .2s ease, opacity .2s ease;
  }
}

/**
* Mixin to support a specific retina display
*/
@mixin retinaDisplay($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-device-pixel-ratio: $ratio),
  only screen and (min-resolution: #{$ratio}dppx) {
    @content;
  }
}
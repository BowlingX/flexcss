/* Main Navigation Container, Off-Screen Navigation*/
.navbar-main {
  position: fixed;
  height: 100%;
  overflow-y: auto;
  font-size: $baseFontSize;
  -webkit-overflow-scrolling: touch;
  width: $MainNavigationWidth;
  background: $MainNavigationBg;
  z-index: $indexMainNavigation;
  will-change: transform;
  transform: translate3d(-100%, 0, 0);
  transition: transform .25s ease;
  top: 0;
  &.open {
    transform: translate3d(0%, 0, 0);
  }

  a:not(.button) {
    color: #aaa;
    &:active:not(.logo) {
      background: rgba(#000, .3) !important;
    }

    &:hover {
      color: #fff;
    }
  }

  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .more-space {
    margin-top: 1rem;
  }

  ul {
    display: flex;
    flex-direction: column;

    li {
      &.active {
        a {
          background: rgba(#000, .2);
          font-weight: bold;
          color: #fff;
        }
      }
      a:not(.button) {
        padding: 10px 20px;
        display: inline-block;
        width: 100%;
        position: relative;
        .badge {
          position: absolute;
          right: 20px;
          margin-top: 2px;
        }
      }
    }
  }

}

.home {
  display: block;
  text-indent: -99999px;
  background: $topbarBg;
  height: $topbarHeight;
  .logo {
    background: url(../img/logo.svg) no-repeat 0px 3px;
    background-size: 100% 100%;
    height: $topbarHeight;
    position: relative;
    width: 130px;
    margin-left: $overallPadding + 10px;
    display: block;
  }
}

.topbar {
  display:flex;
}

.topbar-action {
  
  > * {
    pointer-events: none;
  }
  &.active,
  &:active {
    background: rgba(#000, .2);
  }

  &.right {
    margin-left: 15px;
  }
  cursor: pointer;
  display: inline-block;
  padding: 0 3px;
  font-weight: bold;
  color: #fff !important;
  min-width:30px;
  text-align: center;
  .badge {
    vertical-align: 1px;
  }

  span {
    font-size:$baseFontSize;
    vertical-align: top;
  }
}


.navigation-toggler {
  flex:1;
  text-align:left;
  white-space: nowrap;
  padding-right:30px;
  span {
    text-overflow:ellipsis;
    max-width:100%;
    display:inline-block;
    overflow:hidden;
  }
}


.subnav-content {
  overflow: hidden;
  @include overflowContainer($lightGrayColor, 43px);
}

/**
* A general overflow container to visual
*/
.overflow-container {
  @include overflowContainer(#fff);
}

/**
* Subnavigation and tabs
*/
.subnav, .tabs {
  background: $lightGrayColor;

  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  margin: 0;
  padding: 0;
  list-style: none;
  white-space: nowrap;
  transform: translateZ(0px);
  li {
    display: inline-block;

    margin-right: 6px;
    a, .tab-item {
      padding: 0 $overallPadding;
      color: $subnavColor;
      font-weight: normal;
      line-height: $topbarHeight;
      display: block;
      &:not(span):hover {
        color: lighten($subnavColor, 20%);
      }
    }

    &.active a {
      font-weight: bold;
    }

    &:last-of-type {
      margin-right: 40px;
    }
  }

  input {
    background: transparent !important;
  }
}

.tabs {
  background: transparent;
  position: relative;
  border-bottom: 1px solid $lightGrayColor;
  z-index: 0;
  li {
    border-top-left-radius: $globalRadius;
    border-top-right-radius: $globalRadius;
    position: relative;

    a, .tab-item {
      line-height: $tabHeight;
    }

    &.loading {
      a {
        cursor: wait;
      }
      &:after {
        @include animate(tabWobbleLine, .4s, infinite, alternate);
      }
    }

    &:not(.no-hover) {

      @include borderWobble();
    }

    &.disabled {
      a {
        color: lighten($grayColor, 20%) !important;
        cursor: not-allowed;
      }

      &:after {
        display: none;
      }
    }

    &.link {
      &:after {
        display: none;
      }
    }

  }

  &::-webkit-scrollbar {
    display: none;
  }
}

// Tabs
.tabs-small {
  li {

    a, .tab-item {
      line-height: 1 !important;
      padding-bottom: $tabsSmallPadding !important;
      padding-left: 0 !important;
    }

    &:not(.no-hover) {

      &:hover, &.active {
        &:after {
          width: calc(100% - (#{$tabsSmallPadding*2}));
        }
      }
      &:after {
        left: calc(50% - #{$overallPadding});
        margin: 0 $overallPadding 0 0;
        height: $tabsSmallLineHeight;
      }
    }

    &.loading {
      &:after {
        @include animate(tabWobbleLineSmall, .4s, infinite, alternate);
      }
    }
  }
}

// Content of a toggleable element
.toggle-content {
  padding: $overallPadding 0 0 $overallPadding;
  display: none;

  &.active {
    display: block;
  }
}

.toggle-content-small {
  padding-left: 0;
}